Commit 1 - Position

	Criado a classe Position no pacote boardGame
		Criado atributos int row(linha) column(coluna).
		Criado construtor e get and set para row e columns.
		Criado metodo toString.
		
		
Commit 2 - Board and Piece

	Criado a classe Board no pacote boardGame
		Criado atributos int rows(linhas) columns(colunas).
		Criado atributo Piece[][] pieces
			Este atributo é uma matriz do tipo Piece.
		Criato Consturotor
			Este construtor pede row column de parametro, e usa o vetor piece que vem nulo colocando 
			a row e a column na matriz.
		Criado metodo Get and Set para rows e columns

	Criado a classe Piece no pacote boardGame
		Criado atributo Protected Position position.
		Criado atributo Board board.
		Criado Construtor 
			Este consturtor pede um Board de parametro, e coloca um position null.
		Criado um metodo Proteceted getBoard retornando o board.
		

Commit 3 - UI, ChessMatch ,ChessPiece and Color

	Alterado a classe Board
		Criado metodo piece
			Para retornar a peça dada uma linha e uma coluna 
		Criado metodo piece (Sobrecarga)
			Para retornar a peça com position.getRow e position.getColumn
		
	Criado a classe ENUM color no pacote chess
		Black e Withe
		
	Criado a classe ChessPiece no pacote chess
		Classe definida como subclasse de Piece
		Criado atributo Color color
		Criado construtor
			Este construtor pede um Board e um Color, o Board repassa a chamada para o construtor de Piece
		Criado Get de color
		
	Criado a classe ChessMatch no pacote chess
		Criado atributo Board board
		Criado construtor padrão
			Este consturtor define o board como (8, 8)
		Criando metodo getPieces
			Este metodo retorna uma matriz de peças de xadrez, correspondente a partida
		
	Criado a classe UI no pacote application
		Criado o metodo statico printBoard
			Este metodo imprime o tabuleiro
		Criado o metodo static printPiece
			Este metodo imprime na tela as peças
	
	
Commit 4 - Notes
	
	Criado o arquivo de notas
	
	
Commit 5 - Rook and King

	Alterado classe Board
		Criado o metodo placePiece
			Este metodo é responsavel por atribuir a peça na posição
			
	Criado classe Rook no pacote Chess
		Classe definida como subclasse de ChessPiece
		Criado construtor
			Este consturtor é usado os atributos do construtor da superclasse
		Criado metodo toString @Override
		
	Criado classe King no pacote chess
		Classe definida como subclasse de ChessPiece
		Criado construtor
			Este consturtor é usado os atributos do construtor da superclasse
		Criado metodo toString @Override
		
	Alterado classe ChessMatch
		Criado o metodo initialSetup
			metodo responsavel por iniciar a partida colocando as peças no tabuleiro
		Alterado o metodo ChessMatch
			Alteração feita para que ele crie o tabuleiro, e inicie as peças chamando o inicialSetup
			
			
Commit 6 - Update Notes

	Alterado notas
	
	
Commit 7 - Board Exception

	Criado a classe BoardException no pacote boardgame
		Classe definida como subclasse de RuntimeException(Tratamento de exeções)
		Criado construtor
			Construtor devolve msg que é recebida para superclasse
			
	Alterado classe Board
		Cirado metodo positionExists
			Metodo testa se a linha e coluna é maior que zero e menor que o tabuleiro
		Criando metodo positionExists (Sobrecarga)
			Metodo chama positionExists e passa a linha e a coluna da posição
		Criado metodo thereIsAPiece
			Metodo recebe uma posição, manda a posição para o metodo board.piece e verifica se a peça na
			posição é nula ou não, caso seja tem uma peça na posição
			Adicionado uma programação defensiva
				Notificar erro caso não exista a posição no tabuleiro
		Alterado construtor
			Adicionado uma programação defensiva
				Notificar erro caso seja digitado linha ou coluna menor que 1
		Removido setRows
		Removido setColumn
		Alterado Piece(row,columns)
			Adicionado uma programação defensiva
				Notificar erro caso não exista a posição no tabuleiro
		Alterado Piece(position)
			Adicionado uma programação defensiva
				Notificar erro caso não exista a posição no tabuleiro
		Alterado placePiece(Piece, Position)
			Adicionado uma programação defensiva
				Notificar erro caso escolha uma posição que já existe uma peça
		
Commit 8 - ChessException and ChessPosition

	Criado a classe ChessExcepiton no pacote chess
		Classe definida como subclasse de RuntimeException(Tratamento de exceções)
		Criado Construtor
			Consturotr devolve msg que é recebida para a superclasse
	
	Criado a classe ChessPosition no pacote chess
		Criado atributo char column
		Criado atributo int row
		Criado construtor
			Adicionado uma programação defensiva
				Notificar erro caso seja digitado valor invalido no tabuleiro
		Criado getColumn
		Criado getRow
		Criado metodo toPosition
			Metodo retorna uma nova posição para a peça 
			transformando da posição da matriz, para posição do tabuleiro
		Criado metodo fromPosition
			Metodo retornara uma nova ChessPosition
			transformando da posição pega no toPosition e colocando no ChessPosition
		Criado o toString
			Retorna concatenado a coluna e a linha
			
	Alterado a classe ChessMatch
		Criado metodo placeNewPiece(column,row,piece)
			Metodo responsavel por colocar a peça com base na posição do tabuleiro
			Metodo coloca uma peça, passando a peça, criando uma nova ChessPosition passando a coluna
			e a linah que ele recebe, e usando o metodo toPosition para transformar em posição do tabuleiro
		Alterado metodo initialSetup
			Metodo agora inicia com posição do tabuleiro
		
Commit 9 - Improvemnts in board print

	Alterado classe UI
		Adicionado cores ao fundo e as peças
		
		
Commit 10 - 
		
		Alterado Classe Board
			Criado metodo removePiece(Position)
				Metodo testa se a posição recebida tem uma peça, caso não tenha ele retorna null
				caso tenha ele cria uma variavel peça com a posição recebida, define a peça como null e retorna
			
		Alteradp Classe UI	
			Criado Metodo readChessPosition(Scaner)
				Metodo lê a posição e separa o primeiro caracter como coluna e o segundo caraceer como linha
				e retorna uam nova posição com as linhas decididas
				Adicionado programção defensiva para retornar caso digite valor invalido
			
		Alterado Classe ChessMatch
			Criado Metodo performChessMove(ChessPosition, ChessPositon)
				Metodo recebe a posição da peça atual, e para onde ela vai, depois ele valida a posição que ela está
				faz o movimento e retorna a peça na nova posição.
			Criado metodo validateSourcePosition
				Metodo testa se tem uma peça na posição.
			Criado metodo makeMove(position, position)
			
		Alterado Classe ChessExcepiton
			Classe agora não é mais uma subclasse de RuntimeException, agora é uma subclasse de BoardException
			
		Alterao classe Program
			Definido criação de ChessMatch
			Então definido um loop infinito, ele vai imprimir as peças, depois vai ler a origem e a final
			e criar uma peça, apaga a anterior e joga para o metodo performChessMove
		